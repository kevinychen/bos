Question 1.
===========

No, I do not have to do anything else to save and restore the privilege setting. The eflags registers are automatically saved into the environment's trap frame when the trap handler is evoked. When returning to the environment, the env_pop_tf() function automatically restores the saved eflags registers.


Challenge!
==========

I implemented Unix-style exec. The reason why implementing exec is harder than spawn is because the user environment needs help from the kernel to convert itself to use the registers, image, and page directory of a new environment. It is tricky to change its own registers/page mappings, because doing so might corrupt its own code.

Instead, I tried to reuse as much code from spawn as possible. Most of the exec() code is done in user space. To exec a process, the current environment creates a new environment with exofork() (just like with spawn) and initializes it with the correct ELF image, trap frame, and page mappings. But instead of setting the child environment to ENV_RUNNABLE, which would effectively 'spawn' the process, I implemented a new system call 'sys_env_convert()' which sets the current environment's registers and page mappings to that of the child environment. The sys_env_convert() system call does not return; it instead resumes the current environment at the entry point of the new program.

I wrote a test program, user/exechello.c, which checks that the current environment does not continue running by panicking right after the exec() call.

